# steps:
# # Step 1 — Build Docker image
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['build', '-t', 'us-central1-docker.pkg.dev/burner-samkumar4/weather-fe-repo/weather-fe:latest', '.']

# # Step 2 — Push image to Artifact Registry
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['push', 'us-central1-docker.pkg.dev/burner-samkumar4/weather-fe-repo/weather-fe:latest']

# # Step 3 — Configure kubectl for GKE
# - name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: 'bash'
#   args:
#     - '-c'
#     - |
#       gcloud container clusters get-credentials weather-cluster \
#       --zone us-central1-a \
#       --project burner-samkumar4

# # Step 4 — Apply Kubernetes manifest
# - name: 'gcr.io/cloud-builders/kubectl'
#   args: ['apply', '-f', 'weather-fe.yaml']

# steps:
#   # Step 1 — Build Docker image
#   - name: 'gcr.io/cloud-builders/docker'
#     args: 
#       - 'build'
#       - '-t'
#       - 'us-central1-docker.pkg.dev/burner-samkumar4/weather-fe-repo/weather-fe:latest'
#       - '.'

#   # Step 2 — Push image to Artifact Registry
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['push', 'us-central1-docker.pkg.dev/burner-samkumar4/weather-fe-repo/weather-fe:latest']

#   # Step 3 — Configure kubectl AND deploy in one step
#   - name: 'gcr.io/cloud-builders/gcloud'
#     entrypoint: 'bash'
#     args:
#       - '-c'
#       - |
#         gcloud container clusters get-credentials weather-cluster \
#           --zone us-central1-a \
#           --project burner-samkumar4 \
#           --internal-ip
        
#         # Now apply the Kubernetes manifest
#         kubectl apply -f weather-fe.yaml --validate=false

# Cloud Build file to handle Docker build, push, and GKE deployment.
# This file defines the actual steps executed within Google Cloud.

substitutions:
  # Artifact Registry path for the built image
  _AR_IMAGE: us-central1-docker.pkg.dev/burner-samkumar4/weather-fe-repo/weather-fe:latest
  _GKE_CLUSTER: weather-cluster
  _GKE_ZONE: us-central1-a
  _PROJECT_ID: burner-samkumar4

steps:
  # Step 1 — Build Docker image using the Dockerfile
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Image
    args:
      - 'build'
      - '-t'
      - '${_AR_IMAGE}'
      - '.'

  # Step 2 — Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push to AR
    args: ['push', '${_AR_IMAGE}']

  # Step 3 — Configure kubectl AND deploy to the GKE cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Deploy to GKE
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Configuring kubectl for private cluster..."
        # CRITICAL: Use --internal-ip to ensure connection to the private GKE API endpoint
        gcloud container clusters get-credentials ${_GKE_CLUSTER} \
          --zone ${_GKE_ZONE} \
          --project ${_PROJECT_ID} \
          --internal-ip
        
        echo "Applying Kubernetes manifest (weather-fe.yaml)..."
        # Apply the manifest which includes the Internal Load Balancer service annotation
        kubectl apply -f weather-fe.yaml --validate=false
